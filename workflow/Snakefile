# Python standard library
from os.path import join
from os import listdir
import os, sys, re, datetime
import json

# 3rd party imports from pypi
from snakemake.workflow import workflow as wf_api
from snakemake.utils import R

# Local imports
from scripts.common import (
    allocated,
    provided, 
    references,
    str_bool
)
from scripts.grouping import group_samples_by_reps, group_output_files

configfile: "config.json"

# Global workflow variables
today                           = str(datetime.datetime.today()).split()[0].replace('-', '') # YYYYMMDD
samples                         = config['samples']
workpath                        = config['project']['workpath']
tmpdir                          = config['options']['tmp_dir']
genome                          = config['options']['genome']
assay                           = config['options']['assay']
blocks                          = config['project']['blocks']
blocking                        = False if None in list(blocks.values()) else True
convert                         = {1: False, 2: True}  # 1 = SE, 2 = PE, -1 = Unknown
paired_end                      = convert[config['project']['nends']]  # True if PE else false
run_dba                         = False config['options']['contrasts'] is None else True
extensions                      = ["sorted.RPGC", "Q5DD.RPGC"]
chips                           = config['project']['peaks']['chips']
contrast                        = config['project']['contrast']
UropaCats                       = ["protTSS", "prot", "protSEC", "genes"]
zipGroup1, zipGroup2, zipToolC, contrasts \
                                = zip_contrasts(contrast, PeakTools)
extensionsDict                  = {"sorted": "bam", "Q5DD":"bam"} if paired_end \
                                    else {"sorted": "bam", "Q5DD_tagAlign": "gz"}
file_exts                       = list(extensionsDict.keys())
extensionsFull                  = ['sorted.bam', 'Q5DD.bam'] if paired_end \
                                    else ['sorted.bam', 'Q5DD_tagAlign.gz']

# Directory end points
trim_dir                        = "trim"
kraken_dir                      = "kraken"
bam_dir                         = join(workpath, "bam")
bw_dir                          = join(workpath, "bigwig")
qc_dir                          = join(workpath, "QC")
ppqt_dir                        = join(bam_dir, "ppqt")
macsN_dir                       = join(workpath, "macsNarrow")
macsB_dir                       = join(workpath, "macsBroad")
sicer_dir                       = join(workpath, "sicer")
peakqc_dir                      = join(workpath, "PeakQC")
uropa_dir                       = join(workpath, "UROPA_annotations")
diffbind_dir                    = join(uropa_dir, "DiffBind")
cfTool_dir                      = join(workpath, "cfChIPtool")
genrich_dir                     = join(workpath, "Genrich")
MEME_dir                        = join(workpath, "MEME")

# Extended data structures
'''
:param chip2input <dict>: map (1:1) from sample id to input
{
    "WT_S1": "Input_S1",
    "WT_S2": "Input_S2",
    "WT_S3": "Input_S3",
    "WT_S4": "Input_S4"
    ...
}
'''
chip2input                      = config['project']['peaks']['inputs']

'''
:param groupdata <dict>: map (1:M) of group id to sample ids
{
    "G1": ["WT_S1", "WT_S2"],
    "G2": ["WT_S3", "WT_S4"]
    ...
}
'''
groupdata                       = config['project']['groups']

'''
:param groupdatawinput <dict>: 
{
    "G1": ["WT_S1", "WT_S2"],
    "G2": ["WT_S3", "WT_S4"]
    ...
}

:param groupswreps <list>:
    ["G1", "G2", ...]
'''
groupdatawinput, groupswreps    = group_samples_by_reps(groupdata, samples, chip2input)
groups                          = list(groupdatawinput.keys())
reps                            = False if len(groupswreps) > 0 else True
uniq_inputs                     = list(sorted(set([v for v in chip2input.values() if v])))
sampleswinput                   = [
    chip_value for input_id, chip_value in chip2input.items() \
    if chip_value != 'NA' and chip_value != ''
]
inputnorm                       = [""] if len(sampleswinput) == 0 else ["", ".inputnorm"]
deepgroups, deepexts            = group_output_files(extensions, groups,inputnorm)

# Read in resource information,
# containing information about 
# threads, mem, walltimes, etc.
with open(join('config', 'cluster.json')) as fh:
    cluster = json.load(fh)

rule all:
    input:
        if assay == "cfchip":
            peak_types = ["protTSS"]
            join(qc_dir, "H3K4me3_cfChIP_signature.txt"),
            expand(join(qc_dir, "{name}.{ext}.insert_size_metrics.txt"), name=samples, ext=file_exts)
            expand(join(cfTool_dir, "Output", "H3K4me3", "Signatures", "{name}.Q5DD.csv"), name=chips),
            expand(join(uropa_dir, "{PeakTool}", "{name}_{PeakTool}_uropa_{_type}_allhits.txt"),
                PeakTool=PeakTools, name=chips, _type=peak_types),
            expand(join(uropa_dir, "QC", "AllSamples-macsNarrow_{PeakTool}_uropa_{_type}_allhits.txt"),
                PeakTool="DiffBindQC", _type=peak_types),
            expand(join(uropa_dir, "promoterTable1", "{PeakTool}_promoter_overlap_summaryTable.txt"), PeakTool=PeakTools),
            expand(join(diffbind_dir, "{name}_{PeakTool}_uropa_{_type}_allhits.txt"),
                PeakTool=['DiffbindEdgeR','DiffbindDeseq2'], name=contrasts, _type=peak_types)
            if reps:
                expand(join(diffbind_dir, "{group1}_vs_{group2}-{PeakTool}", "{group1}_vs_{group2}-{PeakTool}_Diffbind.html"), 
                    group1=zipGroup1, group2=zipGroup2, PeakTool=zipToolC)
                expand(join(diffbind_dir, "{name}_{PeakTool}_uropa_{type}_allhits.txt"), 
                    PeakTool=['DiffbindEdgeR','DiffbindDeseq2'], name=contrasts, _type=peak_types)

        else assay in ["atac", "chip"]:
            peak_types = ["protTSS", "prot", "protSEC", "genes"]
            expand(join(MEME_dir, "{PeakTool}", "{name}_meme", "meme-chip.html"), PeakTool=PeakTools, name=chips),
            expand(join(MEME_dir, "{PeakTool}", "{name}_ame", "ame.html"), PeakTool=PeakTools, name=chips)
            if paired_end:
                expand(join(qc_dir, "{name}.{ext}.insert_size_metrics.txt"), name=samples, ext=file_exts)
            if assay == "chip":
                expand(join(macsB_dir, "{name}", "{name}_peaks.broadPeak"), name=chips)
                expand(join(sicer_dir, "{name}", "{name}_broadpeaks.bed"), name=chips)
                if paired_end:
                    short_ext, tag_ext = ["sorted", "Q5DD"], ["sorted", "Q5DD_tagAlign"]
                    expand(join(ppqt_dir, "{name}.{ext}.ppqt"), name=samples, ext=short_ext),
                    expand(join(ppqt_dir, "{name}.{ext}.pdf"), name=samples, ext=short_ext),
                    expand(join(ppqt_dir, "{name}.{ext}.ppqt.txt"), name=samples, ext=short_ext)
                    expand(join(ppqt_dir, "{name}.{ext}.ppqt"), name=samples, ext=tag_ext)
                    expand(join(ppqt_dir, "{name}.{ext}.pdf"), name=samples, ext=tag_ext)
                    expand(join(ppqt_dir, "{name}.{ext}.ppqt.txt"), name=samples, ext=tag_ext)
            if assay == "atac":
                expand(join(genrich_dir, "{name}", "{name}.narrowPeak"), name=chips)
            if reps:
                expand(join(uropa_dir, "{PeakTool}", "{name}_{PeakTool}_uropa_{type}_allhits.txt"),
                    PeakTool=PeakTools, name=chips, _type=peak_types),
                expand(join(diffbind_dir, "{group1}_vs_{group2}-{PeakTool}", "{group1}_vs_{group2}-{PeakTool}_Diffbind.html"), 
                    group1=zipGroup1, group2=zipGroup2, PeakTool=zipToolC)
                expand(join(diffbind_dir, "{name}_{PeakTool}_uropa_{type}_allhits.txt"), 
                    PeakTool=["DiffbindEdgeR", "DiffbindDeseq2"], name=contrasts, _type=peak_types)
                if contrast:
                    expand(join(uropa_dir, "promoterTable2", "DiffbindDeseq2_{PeakTool}_promoter_overlap_summaryTable.txt"), 
                        PeakTool=PeakTools)
        join(workpath,"multiqc_report.html"),
        expand(join(qc_dir, "{name}.preseq.dat"), name=samples),
        expand(join(qc_dir, "AllSamples-{PeakTool}", "AllSamples-{PeakTool}_DiffBindQC_TMMcounts.bed"), PeakTool=PeakTools),
        expand(join(bam_dir, "{name}.{ext}"), name=samples, ext=extensionsFull),
        expand(join(macsN_dir, "{name}","{name}_peaks.narrowPeak"), name=chips),
        expand(join(peakqc_dir, "{PeakTool}.{name}.Q5DD.FRiP_table.txt"), PeakTool=PeakTools, name=samples),
        expand(join(bw_dir, "{name}.{ext}.RPGC.bw"), name=samples, ext=["sorted", "Q5DD"]),
        expand(join(bw_dir, "{name}.Q5DD.RPGC.inputnorm.bw"), name=sampleswinput),